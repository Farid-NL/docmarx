{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docmarx","text":"<p>Documentaci\u00f3n de vulnerabilidades mitigadas reportadas por Checkmarx.</p>"},{"location":"#como-contribuir","title":"Como contribuir","text":"<p>Crea un pull request a trav\u00e9s de Github y lee el <code>README.md</code> del proyecto.</p>"},{"location":"#code-style-pyhon","title":"Code style: Pyhon","text":"<p>Aseg\u00farate de haber instalado las dependencias de desarrollo y ejecuta los siguientes comandos durante el desarrollo y antes de cada commit.</p> <pre><code>ruff format\nruff check --fix\n</code></pre>"},{"location":"#code-style-markdown","title":"Code style: Markdown","text":"<p>Aseg\u00farate de separar cada elemento markdown entre saltos de l\u00ednea, incluyendo elementos anidados.</p> <pre><code>??? note \"Una nota importante\" # (1)!\n\n    === \"Tab 1\" # (2)!\n\n        **C\u00f3digo importante:**\n\n        ```php # (3)!\n        // ...\n        ```\n\n        M\u00e1s informaci\u00f3n...\n</code></pre> <ol> <li>Leyenda</li> <li>Leyenda  Pesta\u00f1as de contenido</li> <li>Leyenda  Pesta\u00f1as de contenido  Bloque de c\u00f3digo</li> </ol>"},{"location":"#markdown-en-el-proyecto","title":"Markdown en el proyecto","text":""},{"location":"#bloques-de-codigo","title":"Bloques de c\u00f3digo","text":"Bloque de c\u00f3digo<pre><code>``` py\nimport tensorflow as tf\n```\n</code></pre> <pre><code>import tensorflow as tf\n</code></pre> Resaltado de l\u00edneas individualesResaltado de rango de l\u00edneas Bloque de c\u00f3digo con lineas resaltadas<pre><code>``` py hl_lines=\"2 4\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> Bloque de c\u00f3digo con rango de lineas resaltadas<pre><code>``` py hl_lines=\"3-5\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#pestanas-de-contenido","title":"Pesta\u00f1as de contenido","text":"Pesta\u00f1as de contenido con bloques de c\u00f3digo<pre><code>=== \"C\"\n\n    ``` c\n    #include &lt;stdio.h&gt;\n\n    int main(void) {\n      printf(\"Hello world!\\n\");\n      return 0;\n    }\n    ```\n\n=== \"C++\"\n\n    ``` c++\n    #include &lt;iostream&gt;\n\n    int main(void) {\n      std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n      return 0;\n    }\n    ```\n</code></pre> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"#leyendas","title":"Leyendas","text":"Leyenda<pre><code>!!! note \"Nota\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Nota</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"#tipos-personalizados","title":"Tipos personalizados","text":"Linux<pre><code>!!! linux \"Informaci\u00f3n en Linux\"\n</code></pre> <p>Informaci\u00f3n en Linux</p> Checkmarx<pre><code>!!! checkmarx \"Reporte de Checkmarx\"\n</code></pre> <p>Reporte de Checkmarx</p>"},{"location":"#anotaciones","title":"Anotaciones","text":"<p>Las anotaciones de c\u00f3digo pueden colocarse en cualquier lugar de un bloque de c\u00f3digo donde pueda colocarse un comentario para el lenguaje del bloque, por ejemplo, para JavaScript en <code>// ...</code> y <code>/* ... */</code>, para YAML en <code># ...</code>, etc.</p> Anotoaciones en bloques de c\u00f3digo<pre><code>``` .c++\n#include &lt;iostream&gt; // (1)!\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n```\n\n1. Incluye esta librer\u00eda\n</code></pre> <pre><code>#include &lt;iostream&gt; // (1)!\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <ol> <li>Incluye esta librer\u00eda</li> </ol>"},{"location":"#iconos-mas-usados","title":"Iconos m\u00e1s usados","text":"<ul> <li><code>:material-history:</code> </li> <li><code>:material-checkbox-marked-circle-outline</code> </li> <li><code>:material-arrow-right-thin:</code> </li> <li><code>:octicons-light-bulb-24:</code> </li> <li><code>:material-star:</code> </li> <li><code>:material-file-tree:</code> </li> </ul>"},{"location":"cpp/dangerous-functions/","title":"Dangerous Functions","text":"<p>Implementa una alternativa segura y recomendada para cualquier funci\u00f3n que se haya identificado como peligrosa.</p>","tags":["C++","Media"]},{"location":"cpp/dangerous-functions/#strtok","title":"<code>strtok</code>","text":"<p>Reemplaza <code>strtok</code> por <code>strtok_s</code> el cual requiere un par\u00e1metro <code>context</code> adicional para gestionar el estado entre llamadas.</p> Consideraci\u00f3n en la versi\u00f3n de Visual C++ <p>La funci\u00f3n <code>strtok_s</code> est\u00e1 disponible a partir de la versi\u00f3n Visual C++ 2005 (8.0).</p> <p>Asegurate de que el proyecto sea compatible, revisa el archivo <code>.vcproj</code> por las siguientes lineas:</p> <pre><code>&lt;VisualStudioProject\n    ProjectType=\"Visual C++\"\n    Version=\"9.00\"\n</code></pre> <code>strtok_r</code> <p>Si trabajas con algun aplicativo Linux, solo cambia <code>strtok</code> por <code>strtok_r</code>.</p> <p>La l\u00f3gica presentada en el ejemplo se conserva.</p>  Original Solucionado <pre><code>#include &lt;string.h&gt; // (1)!\n// ...\nchar *token = strtok(cServercomple, \",,\");\n\nwhile (token != NULL) {\n    // ...\n    token = strtok(NULL, \",,\");\n}\n</code></pre> <ol> <li>Incluye esta cabecera si es que no est\u00e1 ya incluida en el proyecto.</li> </ol> <pre><code>#include &lt;string.h&gt; // (1)!\n// ...\nchar* context = NULL;\nchar *token = strtok_s(cServercomple, \",,\", &amp;context);\n\nwhile (token != NULL) {\n    // ...\n    token = strtok_s(NULL, \",,\", &amp;context);\n}\n</code></pre> <ol> <li>Incluye esta cabecera si es que no est\u00e1 ya incluida en el proyecto.</li> </ol>","tags":["C++","Media"]},{"location":"cpp/dangerous-functions/#memcpy","title":"<code>memcpy</code>","text":"<ol> <li>Crea un header en la ra\u00edz del    proyecto que contendr\u00e1 funciones hom\u00f3logas a funciones con vulnerabilidades. En este caso <code>memcpy</code></li> <li>Instanc\u00eda la clase <code>Funciones_vul</code> y reemplaza <code>memcpy</code> por <code>memorycopy</code> en el archivo afectado con la    vulnerabilidad.</li> </ol>  Original Solucionado <pre><code>#define MAIN\n//...\n\n\nint SN0015( char *cInput1, char *cInput2 )\n{\n\n    //...\n    memcpy( &amp;parametroEntrada1, cInput1, sizeof( EstructurasElp ) );\n    memcpy( &amp;parametroEntrada2, cInput2, sizeof( EstructurasElp ) );\n    //...\n}\n</code></pre> <pre><code>#define MAIN\n//...\n#include \"Funciones_vul.h\"\n\nint SN0015( char *cInput1, char *cInput2 )\n{\n    Funciones_vul vul;\n    //...\n    vul.memorycopy( &amp;parametroEntrada1, cInput1, sizeof( EstructurasElp ) );\n    vul.memorycopy( &amp;parametroEntrada2, cInput2, sizeof( EstructurasElp ) );\n    //...\n}\n</code></pre>","tags":["C++","Media"]},{"location":"cpp/dangerous-functions/#sprintf","title":"<code>sprintf</code>","text":"<ol> <li>Crea un header en la ra\u00edz del    proyecto que contendr\u00e1 funciones hom\u00f3logas a funciones con vulnerabilidades. En este caso <code>sprintf</code></li> <li>Instanc\u00eda la clase <code>Funciones_vul</code> y reemplaza <code>sprintf</code> por <code>imprimirsprintf</code> en el archivo afectado con la    vulnerabilidad.</li> </ol>  Original Solucionado <pre><code>//...\n\n\nBOOL CDlgGenerarliquidaciones::OnInitDialog()\n{\n\n    //...\n    sprintf(cTexto,\"Error en \"+ sqlTxt);\n    //...\n}\n</code></pre> <pre><code>//...\n#include \"Funciones_vul.h\"\n\nBOOL CDlgGenerarliquidaciones::OnInitDialog()\n{\n    Funciones_vul vul;\n    //...\n    vul.imprimirsprintf(cTexto,\"Error en \"+ sqlTxt);\n    //...\n}\n</code></pre>","tags":["C++","Media"]},{"location":"cpp/dangerous-functions/#atoi","title":"<code>atoi</code>","text":"<ol> <li>Crea un header en la ra\u00edz del    proyecto que contendr\u00e1 funciones hom\u00f3logas a funciones con vulnerabilidades. En este caso <code>atoi</code></li> <li>Instanc\u00eda la clase <code>Funciones_vul</code> y reemplaza <code>atoi</code> por <code>caracentero</code> en el archivo afectado con la    vulnerabilidad.</li> </ol>  Original Solucionado <pre><code>#define MAIN\n\n//...\n\nint SN0047(char *cInput1,char *cInput2)\n{\n\n    //...\n    iOpcion = atoi(EstElpGralDllEnt1.opcion);\n    //...\n}\n</code></pre> <pre><code>#define MAIN\n#include \"Funciones_vul.h\"\n//...\n\nint SN0047(char *cInput1,char *cInput2)\n{\n    Funciones_vul vul;\n    //...\n    iOpcion = vul.caracentero(EstElpGralDllEnt1.opcion);\n    //...\n}\n</code></pre>","tags":["C++","Media"]},{"location":"cpp/dangerous-functions/#strlen","title":"<code>strlen</code>","text":"<ol> <li>Crea un header en la ra\u00edz del    proyecto que contendr\u00e1 funciones hom\u00f3logas a funciones con vulnerabilidades. En este caso <code>strlen</code></li> <li>Instanc\u00eda la clase <code>Funciones_vul</code> y reemplaza <code>strlen</code> por <code>longuitudlen</code> en el archivo afectado con la    vulnerabilidad.</li> </ol>  Original Solucionado <pre><code>//...\n\n\nCargarDLL::CargarDLL( char *cDLLCompleteFileName, char *cProjectName, char *cLocalInput1, char *cLocalInput2 )\n{\n\n    //...\n    int nDLLName = ( int ) strlen( cDLLCompleteFileName );\n    //...\n}\n</code></pre> <pre><code>//...\n#include \"Funciones_vul.h\"\n\nCargarDLL::CargarDLL( char *cDLLCompleteFileName, char *cProjectName, char *cLocalInput1, char *cLocalInput2 )\n{\n    Funciones_vul vul;\n    //...\n    int nDLLName = ( int ) vul.longuitudlen( cDLLCompleteFileName );\n    //...\n}\n</code></pre>","tags":["C++","Media"]},{"location":"cpp/header-de-remediaciones/","title":"Header de remediaciones","text":""},{"location":"cpp/header-de-remediaciones/#como-usarlo","title":"\u00bfC\u00f3mo usarlo?","text":"<ol> <li> <p>Descarga  el archivo y c\u00f3pialo en la ra\u00edz del proyecto</p> <pre><code> sn0015/\n \u251c\u2500\u2500 Clases/\n \u2502   \u251c\u2500\u2500 CSapConsultarCifrasDeControlPOSGRESQL01.cpp\n \u2502   \u251c\u2500\u2500 CSapConsultarCifrasDeControlPOSGRESQL01.hpp\n \u2502   \u2514\u2500\u2500 ...\n \u251c\u2500\u2500 DlgCompararCifrasQuincena.cpp\n \u251c\u2500\u2500 DlgCompararCifrasQuincena.h\n+\u251c\u2500\u2500 Funciones_vul.h\n \u251c\u2500\u2500 ggn.lib\n \u251c\u2500\u2500 ModuloPrincipal.cpp\n \u2514\u2500\u2500 ...\n</code></pre> </li> <li> <p>Instanc\u00eda la clase <code>Funciones_vul</code> y reemplaza la funci\u00f3n afectada con la vulnerabilidad con su hom\u00f3logo.</p> </li> </ol>"},{"location":"cpp/header-de-remediaciones/#codigo","title":"C\u00f3digo","text":"<pre><code>#ifndef FUNCIONES_VUL_H\n#define FUNCIONES_VUL_H\n\nclass Funciones_vul {\npublic:\n    // Hom\u00f3logo de la funci\u00f3n memcpy\n    void *memorycopy(void *dest, const void *src, size_t n) {\n        char *p_dest = (char *) dest;\n        const char *p_src = (const char *) src;\n\n        for (size_t i = 0; i &lt; n; i++) {\n            p_dest[i] = p_src[i];\n        }\n\n        return dest;\n    }\n\n    // H\u00f3mologo de la funci\u00f3n memset\n    void *llenamemoria(void *b, char c, int len) {\n        char *b_char = (char *) b;\n\n        if (b == NULL)\n            return NULL;\n\n        while (*b_char &amp;&amp; len &gt; 0) {\n            *b_char = c;\n            b_char++;\n            len--;\n        }\n\n        return b; // as this pointer has not changed\n    }\n\n    // Hom\u00f3logo de la funci\u00f3n sprintf\n    int imprimirsprintf(char *str, const char *format, ...) {\n        va_list args;\n        int count = 0;\n        int bufferIndex = 0;\n\n        va_start(args, format);\n\n        while (*format != '\\0') {\n            if (*format == '%') {\n                format++; // avanzar al siguiente car\u00e1cter despu\u00e9s del '%'\n\n                // Procesar los modificadores v\u00e1lidos (solo para este ejemplo)\n                if (*format == 'd') {\n                    int value = 0;\n                    value = va_arg(args, int);\n                    char buffer[12]; // suficientemente grande para representar un n\u00famero entero\n                    int numDigits = 0;\n\n                    // Convertir el n\u00famero entero a una cadena\n                    if (value == 0) {\n                        buffer[numDigits++] = '0';\n                    } else {\n                        if (value &lt; 0) {\n                            str[bufferIndex++] = '-';\n                            value = -value;\n                        }\n\n                        while (value != 0) {\n                            buffer[numDigits++] = '0' + (value % 10);\n                            value /= 10;\n                        }\n\n                        // Invertir la cadena para que quede en el orden correcto\n                        for (int i = numDigits - 1; i &gt;= 0; i--) {\n                            str[bufferIndex++] = buffer[i];\n                        }\n                    }\n\n                    count += numDigits;\n                }\n                // Puedes agregar m\u00e1s modificadores como 's', 'c', etc.\n            } else if (*format == 's') {\n                // Manejar cadenas de caracteres\n                const char *svalue = NULL;\n                svalue = va_arg(args, const char*);\n                while (*svalue != '\\0') {\n                    str[bufferIndex++] = *svalue++;\n                    count++;\n                }\n            } else {\n                str[bufferIndex++] = *format;\n                count++;\n            }\n\n            format++;\n        }\n\n        // str[sizeof(bufferIndex)+2000] = '\\0'; // terminar la cadena con un car\u00e1cter nulo\n        // str[bufferIndex] = '\\0';\n\n        va_end(args);\n        return count;\n    }\n\n    // H\u00f3mologo de la funci\u00f3n strlen\n    size_t longuitudlen(const char *str) {\n        const char *s = str; // Apuntador auxiliar para recorrer la cadena\n\n        while (*s)\n            s++; // Avanza al siguiente car\u00e1cter contando hasta llegar al final de la cadena\n\n        // Retorna la diferencia de posiciones entre el apuntador final y el inicial, que representa la longitud de la cadena\n        return s - str;\n    }\n\n    //Homologo de la funci\u00f3n strcopy\n    char *stringcopy(char *destino, const char *origen) {\n        char *ptr = destino;\n        while (*origen != '\\0') {\n            *destino = *origen;\n            destino++;\n            origen++;\n        }\n        *destino = '\\0';\n        return ptr;\n    }\n\n    //Homologo de la funci\u00f3n atoi\n    int caracentero(const char *str) {\n        int resultado = 0;\n        int signo = 1;\n        while (isspace(*str)) {\n            str++; // Salta los caracteres de espacio en blanco iniciales\n        }\n        if (*str == '+' || *str == '-') {\n            // Si la cadena comienza con un signo, determina si es positivo o negativo\n            if (*str == '-') {\n                signo = -1;\n            }\n            str++; // Salta el signo\n        }\n        while (isdigit(*str)) {\n            // Convierte los d\u00edgitos en un n\u00famero entero\n            resultado = resultado * 10 + (*str - '0');\n            str++; // Avanza al siguiente caracter de la cadena\n        }\n        return resultado * signo; // Aplica el signo al resultado final\n    }\n\n    //Homologo de la funci\u00f3n atol\n    long int caralargo(const char *str) {\n        long result = 0;\n        int sign = 1;\n\n        // Verificar si la cadena comienza con un signo negativo\n        if (*str == '-') {\n            sign = -1;\n            str++;\n        }\n\n        // Recorrer la cadena y convertir cada d\u00edgito a un valor num\u00e9rico\n        while (*str) {\n            if (*str &gt;= '0' &amp;&amp; *str &lt;= '9') {\n                result = result * 10 + (*str - '0');\n            } else {\n                // Si se encuentra un caracter no num\u00e9rico, se detiene la conversi\u00f3n\n                break;\n            }\n            str++;\n        }\n\n        // Devolver el resultado con su signo correspondiente\n        return sign * result;\n    }\n};\n#endif //FUNCIONES_VUL_H\n</code></pre>"},{"location":"cpp/information-exposure-through-comments/","title":"Information Exposure Through Comments","text":"<p>Elimina el comentario que contengan palabras similares a 'password'</p>","tags":["C++","Baja"]},{"location":"cpp/information-exposure-through-comments/#ejemplo","title":"Ejemplo","text":"Original Solucionado <pre><code>//g.password = \"X\";\n</code></pre> <pre><code>\n</code></pre>","tags":["C++","Baja"]},{"location":"cpp/memory-leak/","title":"Memory Leak","text":"<p>Implementa una alternativa segura y recomendada para cualquier funci\u00f3n que se haya identificado como peligrosa.</p>","tags":["C++","Media"]},{"location":"cpp/memory-leak/#cdynlinklibrary","title":"<code>CDynLinkLibrary</code>","text":"Original Solucionado <pre><code>new CDynLinkLibrary(SN0015DLL);\n</code></pre> <pre><code>static CDynLinkLibrary dynDLL(SN0015DLL);\n</code></pre>","tags":["C++","Media"]},{"location":"cpp/unchecked-return-value/","title":"Unchecked Return Value","text":"<p>Comprueba el resultado de cualquier funci\u00f3n llamada que devuelva un valor, y verifica que el resultado sea un valor esperado.</p>","tags":["C++","Baja"]},{"location":"cpp/unchecked-return-value/#remove-stdio-h","title":"<code>remove (stdio. h)</code>","text":"<p>Envuelve la funci\u00f3n en un <code>if</code> o <code>if-else</code> y maneja el valor retornado por <code>remove()</code> seg\u00fan la l\u00f3gica de la aplicaci\u00f3n.</p>  Original Solucionado <pre><code>remove(rutacon);\n</code></pre> <pre><code>if (remove(rutacon) != 0) {\n    AfxMessageBox(\"Error al intentar eliminar el archivo de conexion: \" + rutacon);\n}\n</code></pre>","tags":["C++","Baja"]},{"location":"cpp/use-of-obsolete-functions/","title":"Use of Obsolete Functions","text":"<p>Implementa una alternativa segura y recomendada para cualquier funci\u00f3n que se haya identificado como peligrosa.</p>","tags":["C++","Baja"]},{"location":"cpp/use-of-obsolete-functions/#memset","title":"<code>memset</code>","text":"<ol> <li>Crea un header en la ra\u00edz del    proyecto que contendr\u00e1 funciones hom\u00f3logas a funciones con vulnerabilidades. En este caso <code>memset</code></li> <li>Instanc\u00eda la clase <code>Funciones_vul</code> y reemplaza <code>memset</code> por <code>llenamemoria</code> en el archivo afectado con la    vulnerabilidad.</li> </ol>  Original Solucionado <pre><code>#define MAIN\n//...\n\n\nint SN0015( char *cInput1, char *cInput2 )\n{\n\n    //...\n    memset( &amp;parametroEntrada1, 0, sizeof( EstructurasElp ) );\n    memset( &amp;parametroEntrada2, 0, sizeof( EstructurasElp ) );\n    //...\n}\n</code></pre> <pre><code>#define MAIN\n//...\n#include \"Funciones_vul.h\"\n\nint SN0015( char *cInput1, char *cInput2 )\n{\n    Funciones_vul vul;\n    //...\n    vul.llenamemoria( &amp;parametroEntrada1, 0, sizeof( EstructurasElp ) );\n    vul.llenamemoria( &amp;parametroEntrada2, 0, sizeof( EstructurasElp ) );\n    //...\n}\n</code></pre>","tags":["C++","Baja"]},{"location":"cpp/use-of-sizeof-on-a-pointer-type/","title":"Use of Sizeof On a Pointer Type","text":"<p>Evita usar <code>sizeof()</code> con apuntadores</p> <p>A continuaci\u00f3n se muestra soluciones espec\u00edficas.</p>","tags":["C++","Alta"]},{"location":"cpp/use-of-sizeof-on-a-pointer-type/#cargardll","title":"<code>CargarDLL</code>","text":"Original Solucionado  CargarDLL.cpp CargarDLL.h Archivos impactados <pre><code>CargarDLL::CargarDLL(\n    char *cDLLCompleteFileName, char *cProjectName,\n    char *cLocalInput1, char *cLocalInput2,\n    char *cLocalOutput1,\n    char *cLocalOutput2 )\n{\n    //...\n    if ( hDLL != NULL )\n    {\n        functPointer = ( LPFN2 )GetProcAddress( hDLL, cProjectName );\n\n        if ( !functPointer )\n        {\n            //...\n        }\n        else\n        {\n            //..\n            memcpy( sOutput1, cLocalOutput1, sizeof( cLocalOutput1 ) );\n            memcpy( sOutput2, cLocalOutput2, sizeof( cLocalOutput2 ) );\n        }\n    }\n    //...\n}\n</code></pre> <pre><code>#ifndef __CARGAR_DLL_H__\n#define __CARGAR_DLL_H__\n\nclass CargarDLL\n{\npublic:\n\n    CargarDLL( char *cDLLCompleteFileName, char *cProjectName, char *cLocalInput1, char *cLocalInput2 );\n    CargarDLL(\n        char *cDLLCompleteFileName, char *cProjectName,\n        char *cLocalInput1, char *cLocalInput2,\n        char *cLocalOutput1,\n        char *cLocalOutput2 );\n    ~CargarDLL();\n\n    //...\n};\n\n\n#endif __CARGAR_DLL_H__\n</code></pre> <pre><code>CargarDLL cargar(\"CONTA65.DLL\",\"CONTA65\",\n    cParamEntrada1,cParamEntrada2,\n    cParamSalida1,\n    cParamSalida2);\n</code></pre>  CargarDLL.cpp CargarDLL.h Archivos impactados <pre><code>CargarDLL::CargarDLL(\n    char *cDLLCompleteFileName, char *cProjectName,\n    char *cLocalInput1, char *cLocalInput2,\n    char *cLocalOutput1, const size_t cLocalOutput1Size,\n    char *cLocalOutput2, const size_t cLocalOutput2Size )\n{\n    //...\n    if ( hDLL != NULL )\n    {\n        functPointer = ( LPFN2 )GetProcAddress( hDLL, cProjectName );\n\n        if ( !functPointer )\n        {\n            //...\n        }\n        else\n        {\n            //..\n            memcpy( sOutput1, cLocalOutput1, cLocalOutput1Size );\n            memcpy( sOutput2, cLocalOutput2, cLocalOutput2Size );\n        }\n    }\n    //...\n}\n</code></pre> <pre><code>#ifndef __CARGAR_DLL_H__\n#define __CARGAR_DLL_H__\n\nclass CargarDLL\n{\npublic:\n\n    CargarDLL( char *cDLLCompleteFileName, char *cProjectName, char *cLocalInput1, char *cLocalInput2 );\n    CargarDLL(\n        char *cDLLCompleteFileName, char *cProjectName,\n        char *cLocalInput1, char *cLocalInput2,\n        char *cLocalOutput1, size_t cLocalOutput1Size,\n        char *cLocalOutput2, size_t cLocalOutput2Size );\n    ~CargarDLL();\n\n    //...\n};\n\n\n#endif __CARGAR_DLL_H__\n</code></pre> <pre><code>CargarDLL cargar(\"CONTA65.DLL\",\"CONTA65\",\n    cParamEntrada1,cParamEntrada2,\n    cParamSalida1, sizeof(cParamSalida1)\n    cParamSalida2, sizeof(cParamSalida2));\n</code></pre>","tags":["C++","Alta"]},{"location":"js/client-dom-open-redirect/","title":"Client DOM Open Redirect","text":"<p>La librer\u00eda DOM Purify parece no hacer efecto en esta vulnerabilidad.</p> <p>Suele suceder porque Checkmarx detecta <code>.value</code> como un valor potencialmente contaminado.</p> <p>Evita usar <code>value</code> al generar una URL que ser\u00e1 utilizada por <code>window.location.href(...)</code> o <code>window.open(...)</code></p>","tags":["Javascript","Baja"]},{"location":"js/client-dom-open-redirect/#alternativa-1","title":"Alternativa 1","text":"<p>Consideraci\u00f3n</p> <p>Solo usarlo si el valor del elemento HTML est\u00e1 predeterminado y no cambiar\u00e1 durante la ejecuci\u00f3n del programa.</p> <p>Reemplaza <code>value</code> por <code>getAttribute('value')</code></p>  Original Solucionado <pre><code>huellahe(DOMPurify.sanitize(document.getElementById('user').value));\n</code></pre> <pre><code>var userElement = document.getElementById('user').getAttribute('value');\nhuellahe(DOMPurify.sanitize(userElement));\n</code></pre>","tags":["Javascript","Baja"]},{"location":"js/client-dom-open-redirect/#alternativa-2","title":"Alternativa 2","text":"<p>Posiblemente genere errores</p> <p>Al guardar el elemento HTML entero en vez de solo su valor, puede generar errores</p> <p>Reemplaza <code>document.getElementById('...').value</code> por <code>document.querySelector('#...')</code></p>  Original Solucionado <pre><code>var variables =\"empleado=\" + document.getElementById('usuario').value +\n    \"&amp;delcentro=\" + document.getElementById('txt_delcentro').value +\n    \"&amp;alcentro=\" +document.getElementById('txt_alcentro').value +\n    \"&amp;fechacorte=\" + fechacortebuffer +\n    \"&amp;empresa=\" +document.getElementById('cbx_empresa').value;\nopciones = \"top=15,left=15,width=700,height=800,toolbar=no,menubar=no,status=yes,scrollbars=yes,resizable=no;\"\nvar ventmp = window.open(\"../proc/proc_exporta_excel.php?\" + variables, 'ventmp', opciones);\n</code></pre> <pre><code>var variables =\"empleado=\" + document.querySelector('#usuario') +\n    \"&amp;delcentro=\" + document.querySelector('#txt_delcentro') +\n    \"&amp;alcentro=\" +document.querySelector('#txt_alcentro') +\n    \"&amp;fechacorte=\" + fechacortebuffer +\n    \"&amp;empresa=\" +document.querySelector('#cbx_empresa');\nopciones = \"top=15,left=15,width=700,height=800,toolbar=no,menubar=no,status=yes,scrollbars=yes,resizable=no;\"\nvar ventmp = window.open(\"../proc/proc_exporta_excel.php?\" + variables, 'ventmp', opciones);\n</code></pre>","tags":["Javascript","Baja"]},{"location":"js/client-dom-stored-xss/","title":"Client DOM Stored XSS","text":"<p>Sanitiza el valor correspondiente con ayuda de DOM Purify.</p> <p>En algunos casos, en los que solo es est\u00e9 insertando texto plano, se puede utilizar <code>.text()</code>.</p> <p>Nota</p> <p>En funci\u00f3n del programa puede que sea necesario permitir ciertos atributos, etiquetas, etc.</p> <p>Revisa la documentaci\u00f3n de DOM Purify y el siguiente ejemplo.</p>  Original Solucionado <pre><code>$(\"#cbx_sistema\").html(select);\n</code></pre> <pre><code>$(\"#cbx_sistema\").html(DOMPurify.sanitize(select));\n</code></pre>","tags":["Javascript","Alta"]},{"location":"js/client-jquery-deprecated-symbols/","title":"Client JQuery Deprecated Symbols","text":"","tags":["Javascript","Baja"]},{"location":"js/client-jquery-deprecated-symbols/#load","title":"<code>load</code>","text":"<p>Utiliza <code>$.get</code> y aseg\u00farate de adaptarlo correctamente.</p>  Original Solucionado Solucionado (DOM Purify) <pre><code>$dialog.load('consultadatos.php?rfc=' + N + '&amp;folio=' + F + '&amp;serie=' + A).dialog({\n    title: 'Consulta de Facturas Electronicas',\n    width: 700,\n    height: 600,\n    modal: true,\n    resizable: false,\n    autoResize: false,\n    draggable: false\n});\n</code></pre> <pre><code>$.get('consultadatos.php', { rfc: N, folio: F, serie: A }, function(response) {\n    $dialog.html(response).dialog({\n        title: 'Consulta de Facturas Electronicas',\n        width: 700,\n        height: 600,\n        modal: true,\n        resizable: false,\n        autoResize: false,\n        draggable: false\n    });\n});\n</code></pre> <pre><code>$.get('consultadatos.php', { rfc: N, folio: F, serie: A }, function(response) {\n    $dialog.html(DOMPurify.sanitize(response, {ALLOWED_ATTR: ['cellpadding', 'cellspacing', 'border', 'width', 'height', 'style', 'align', 'colspan', 'BGCOLOR', 'onclick', 'name', 'class']})).dialog({\n        title: 'Consulta de Facturas Electronicas',\n        width: 700,\n        height: 600,\n        modal: true,\n        resizable: false,\n        autoResize: false,\n        draggable: false\n    });\n});\n</code></pre>","tags":["Javascript","Baja"]},{"location":"js/client-jquery-deprecated-symbols/#parsejson","title":"<code>parseJSON</code>","text":"<p>Utiliza <code>JSON.parse</code> y aseg\u00farate de adaptarlo correctamente.</p>  Original Solucionado <pre><code>var json = jQuery.parseJSON(respuesta);\n</code></pre> <pre><code>var json = JSON.parse(respuesta);\n</code></pre>","tags":["Javascript","Baja"]},{"location":"js/client-jquery-deprecated-symbols/#trim","title":"<code>trim</code>","text":"<p>Utiliza <code>trim</code> (nativa de JS) y aseg\u00farate de adaptarlo correctamente.</p>  Original Solucionado <pre><code>var val = $(\"#txtcaracteristica\").val();\nvar val = $.trim(val)\n</code></pre> <pre><code>var val = $(\"#txtcaracteristica\").val();\nvar val = val.trim(); // (1)!\n</code></pre> <ol> <li>Si Checkmarx sigue detectando la vulnerabilidad entonces utiliza <code>.trimStart()</code> y <code>.trimEnd()</code> <pre><code>var val = val.trimStart();\nvar val = val.trimEnd();\n</code></pre></li> </ol>","tags":["Javascript","Baja"]},{"location":"js/client-potential-xss/","title":"Client Potential XSS","text":"<p>Sanitiza el valor correspondiente con ayuda de DOM Purify.</p> <p>En algunos casos, en los que solo es est\u00e9 insertando texto plano, se puede utilizar <code>.text()</code>.</p> <p>Nota</p> <p>En funci\u00f3n del programa puede que sea necesario permitir ciertos atributos, etiquetas, etc.</p> <p>Revisa la documentaci\u00f3n de DOM Purify y el siguiente ejemplo.</p>  Original Solucionado <pre><code>$(\"#cbx_sistema\").html(select);\n</code></pre> <pre><code>$(\"#cbx_sistema\").html(DOMPurify.sanitize(select));\n</code></pre>","tags":["Javascript","Media"]},{"location":"php/client-privacy-violation/","title":"Client Privacy Violation","text":"<p>Suele suceder porque Checkmarx detecta palabras potencialmente inseguras, tales como <code>password</code>, <code>clave</code>, <code>contrase\u00f1a</code>, etc.</p> <p>Cambia esas palabras por palabras equivalentes:</p> <ul> <li><code>clave</code> <code>clv</code></li> <li><code>password</code> <code>pswd</code></li> <li><code>password</code> <code>pa55word</code></li> </ul> <p>Aseg\u00farate de rastrear todos sus usos y el origen de este tipo de palabras, y cambia todas.</p>","tags":["PHP","Media"]},{"location":"php/client-privacy-violation/#ejemplo","title":"Ejemplo","text":"Reporte de Checkmarx SourceDestination <p>File: <code>files/js/frm_agregarpropuestasueldosADMON.js</code> Line: 3132  Object: clave</p> <p>Code snippet:</p> <pre><code>option += \"&lt;option style='text-align: left;' value='\" + json.datos[i].clave + \"'&gt;\" + json.datos[i].clave + ' - ' + json.datos[i].nombre + \"&lt;/option&gt;\";\n</code></pre> <p>File: <code>files/js/frm_agregarpropuestasueldosADMON.js</code> Line: 3136  Object: html</p> <p>Code snippet:</p> <pre><code>$(\"#cbo_rot_seccion\").trigger(\"chosen:updated\").html(option);\n</code></pre> <p>Checkmarx detecta la palabra <code>clave</code> el origen de la vulnerabilidad. Cambiamos dicho valor por <code>clv</code>, en el archivo.</p>  Original Solucionado <pre><code>$.ajax({\n    // ...\n    url: 'ajax/json/json_fun_obtener_filtros_rotacion.php' // (1)!\n})\n    .done(function(data) {\n        json = json_decode(data);\n        if (json.estado == 0) {\n            // ...\n            for (var i = 0; i &lt; json.datos.length; i++) {\n                option += \"&lt;option style='text-align: left;' value='\"\n                    + json.datos[i].clave + \"'&gt;\" + json.datos[i].clave\n                    + ' - ' + json.datos[i].nombre + \"&lt;/option&gt;\";\n            }\n            $(\"#cbo_rot_seccion\").trigger(\"chosen:updated\").html(option);\n            $(\"#cbo_rot_seccion\").trigger(\"chosen:updated\");\n        }\n        // ...\n    })\n    // ...\n</code></pre> <ol> <li>La solicitud HTTP utiliza esta URL, siendo \u00e9ste archivo el origen de <code>clave</code>.</li> </ol> <pre><code>$.ajax({\n    // ...\n    url: 'ajax/json/json_fun_obtener_filtros_rotacion.php' // (1)!\n})\n    .done(function(data) {\n        json = json_decode(data);\n        if (json.estado == 0) {\n            // ...\n            for (var i = 0; i &lt; json.datos.length; i++) {\n                option += \"&lt;option style='text-align: left;' value='\"\n                    + json.datos[i].clv + \"'&gt;\" + json.datos[i].clv\n                    + ' - ' + json.datos[i].nombre + \"&lt;/option&gt;\";\n            }\n            $(\"#cbo_rot_seccion\").trigger(\"chosen:updated\").html(option);\n            $(\"#cbo_rot_seccion\").trigger(\"chosen:updated\");\n        }\n        // ...\n    })\n    // ...\n</code></pre> <ol> <li>La solicitud HTTP utiliza esta URL, siendo \u00e9ste archivo el origen de <code>clave</code>.</li> </ol> <p>Tambi\u00e9n es necesario modificar el archivo <code>json_fun_obtener_filtros_rotacion.php</code>, pues es el archivo que genera el JSON consumido por <code>frm_agregarpropuestasueldosADMON.js</code>.</p>  Original Solucionado <pre><code>foreach ($ds as $value) {\n    $arr[] = array('nombre' =&gt; trim($value['snombre']),\n        'value' =&gt; $value['iid'],\n        'clave' =&gt; $value['sclave']\n    );\n}\n</code></pre> <pre><code>foreach ($ds as $value) {\n    $arr[] = array('nombre' =&gt; trim($value['snombre']),\n        'value' =&gt; $value['iid'],\n        'clv' =&gt; $value['sclave']\n    );\n}\n</code></pre>","tags":["PHP","Media"]},{"location":"php/deprecated-functions/","title":"Deprecated Functions","text":"<p>Cambia la funci\u00f3n por una equivalente soportada.</p>","tags":["PHP","Baja"]},{"location":"php/deprecated-functions/#utf8_encode","title":"<code>utf8_encode</code>","text":"Original Solucionado <pre><code>echo utf8_encode($respuesta);\n</code></pre> <pre><code>echo mb_convert_encoding($respuesta, 'UTF-8', 'ISO-8859-1');\n</code></pre>","tags":["PHP","Baja"]},{"location":"php/deprecated-functions/#utf8_decode","title":"<code>utf8_decode</code>","text":"Original Solucionado <pre><code>echo utf8_decode($respuesta);\n</code></pre> <pre><code>echo mb_convert_encoding($respuesta, 'ISO-8859-1', 'UTF-8');\n</code></pre>","tags":["PHP","Baja"]},{"location":"php/error-messages-misconfiguration/","title":"Error Messages Misconfiguration","text":"<p>Desactiva las directivas relacionadas con mostrar errores por medio de la creaci\u00f3n de un archivo <code>.ini</code> en la ra\u00edz del proyecto:</p>  Original Solucionado Estructura del proyecto<pre><code>ClubdeProteccion/\n\u251c\u2500\u2500 ajax/\n\u2502   \u251c\u2500\u2500 frm/\n\u2502   \u251c\u2500\u2500 json/\n\u2502   \u2514\u2500\u2500 proc/\n\u251c\u2500\u2500 files/\n\u251c\u2500\u2500 clubdeProteccion.php\n\u251c\u2500\u2500 index.php\n\u2514\u2500\u2500 log14-04-2024_proc_validaracceso_intranet.txt\n</code></pre>  Estructura del proyecto php.ini <pre><code> ClubdeProteccion/\n \u251c\u2500\u2500 ajax/\n \u2502   \u251c\u2500\u2500 frm/\n \u2502   \u251c\u2500\u2500 json/\n \u2502   \u2514\u2500\u2500 proc/\n \u251c\u2500\u2500 files/\n \u251c\u2500\u2500 clubdeProteccion.php\n \u251c\u2500\u2500 index.php\n \u251c\u2500\u2500 log14-04-2024_proc_validaracceso_intranet.txt\n+\u2514\u2500\u2500 php.ini\n</code></pre> <pre><code>display_startup_errors = Off\ndisplay_errors = Off\nerror_reporting = 0\n; (1)!\n</code></pre> <ol> <li>Es aconsejable activar las siguientes directivas <pre><code>log_errors = On\nerror_log = /ruta/a/tu/log_de_errores.log\n</code></pre></li> </ol>","tags":["PHP","Baja"]},{"location":"php/improper-exception-handling/","title":"Improper Exception Handling","text":"<p>Envuelve la sentencia afectada en un bloque <code>try-catch</code>.</p>","tags":["PHP","Baja"]},{"location":"php/improper-exception-handling/#json_encode","title":"<code>json_encode</code>","text":"Original  Solucionado <pre><code>echo json_encode($respuesta);\n</code></pre> <code>PHP &lt; 7.3</code><code>PHP &gt;= 7.3</code> <pre><code>try {\n    echo json_encode($respuesta);\n} catch (\\Throwable $th) {\n    // echo \"Ocurri\u00f3 un error al intentar generar el archivo.\";\n}\n</code></pre> <pre><code>try {\n    echo json_encode($respuesta, JSON_THROW_ON_ERROR);\n} catch (JsonException $e) {\n    // echo \"Ocurri\u00f3 un error al intentar generar el archivo.\";\n}\n</code></pre>","tags":["PHP","Baja"]},{"location":"php/improper-exception-handling/#json_decode","title":"<code>json_decode</code>","text":"Original  Solucionado <pre><code>echo json_decode($respuesta);\n</code></pre> <code>PHP &lt; 7.3</code><code>PHP &gt;= 7.3, &lt; 8.0</code><code>PHP &gt;= 8.0</code> <pre><code>try {\n    echo json_decode($respuesta);\n} catch (\\Throwable $th) {\n    // echo \"Ocurri\u00f3 un error al intentar generar el archivo.\";\n}\n</code></pre> <pre><code>try {\n    echo json_decode($respuesta, null, 512, JSON_THROW_ON_ERROR); // (1)!\n} catch (JsonException $e) {\n    // echo \"Ocurri\u00f3 un error al intentar generar el archivo.\";\n}\n</code></pre> <ol> <li>Coloca los valores predeterminados de cada argumento hasta llegar al que interesa: <code>flags</code>, el \u00faltimo.</li> </ol> <pre><code>try {\n    echo json_decode($respuesta, flags: JSON_THROW_ON_ERROR); // (1)!\n} catch (JsonException $e) {\n    // echo \"Ocurri\u00f3 un error al intentar generar el archivo.\";\n}\n</code></pre> <ol> <li>Haciendo uso de Named Arguments</li> </ol>","tags":["PHP","Baja"]},{"location":"php/information-exposure-through-an-error-message/","title":"Information Exposure Through an Error Message","text":"<p>Cambia el manejo de excepciones/errores usando <code>error_log</code>.</p>  Original Solucionado <pre><code>} catch (Exception $ex) {\n    $mensaje = \"\";\n    $estado = -2;\n    $mensaje = $ex-&gt;getMessage();\n}\n</code></pre> <pre><code>} catch (Exception $ex) {\n    $mensaje = \"Ocurri\u00f3 un error en la Base de Datos. Revisa el log '_proc_ce_buscar_empleado.txt'\";\n    $estado = -2;\n    error_log(date(\"g:i:s a\") . \" -&gt; Error al consumir proc_buscar_empleado_cecc\\n\", 3, \"../log\" . date('d-m-Y') . \"_proc_ce_buscar_empleado.txt\");\n    error_log(\"\\t\\t\" . \"   -&gt; Error: $estado; Tipo: \" . $ex-&gt;getMessage() . \"  \\n\", 3, \"../log\" . date('d-m-Y') . \"_proc_ce_buscar_empleado.txt\");\n}\n</code></pre>","tags":["PHP","Baja"]},{"location":"php/insufficient-sanitization-for-xss/","title":"Insufficient Sanitization for XSS","text":"<p>Suele suceder con las variables superglobales, tales como <code>$_POST</code> y <code>$_GET</code>, al no ser sanitizadas correctamente. Pero tambi\u00e9n puede ocurrir con alguna otra variable.</p> <p>Envuelve el fragmento de c\u00f3digo afectado con la funci\u00f3n <code>htmlspecialchars()</code> con los siguientes par\u00e1metros:</p> <ul> <li><code>ENT_QUOTES</code></li> <li><code>'UTF-8'</code></li> </ul>  Original Solucionado <pre><code>if ($strValjson = fopen(\"$strValjson\", \"r\")) {\n    $strValue = '';\n    while (!feof($strValjson)) {\n        $strValue .= fgets($strValjson, 4096);\n    }\n    fclose($strValjson);\n}\n</code></pre> <pre><code>if ($strValjson = fopen(\"$strValjson\", \"r\")) {\n    $strValue = '';\n    while (!feof($strValjson)) {\n        $strValue .= fgets($strValjson, 4096);\n    }\n    fclose($strValjson);\n}\n$strValue = htmlspecialchars($strValue, ENT_QUOTES, 'UTF-8');\n</code></pre>","tags":["PHP","Baja"]},{"location":"php/log-forging/","title":"Log Forging","text":"<p>Sanitiza las variables usando una de estas formas:</p> <ul> <li>Reflected XSS</li> <li>Trust Boundary Violation in Session Variables</li> </ul>  Original Solucionado <pre><code>$iIdu_tiposeguro = $_POST['iIdu_tiposeguro']) ?: 0;\n</code></pre> <pre><code>$iIdu_tiposeguro = filter_input(INPUT_POST, 'iIdu_tiposeguro', FILTER_SANITIZE_NUMBER_INT) ?: 0;\n</code></pre>","tags":["PHP","Baja"]},{"location":"php/missing-framing-policy/","title":"Missing Framing Policy","text":"<p>Establece la cabecera <code>X-FRAME-OPTIONS</code> con el valor <code>SAMEORIGIN</code>.</p>  Original Solucionado <pre><code>&lt;?php\n//...\n</code></pre> <pre><code>&lt;?php\n//...\nheader('X-Frame-Options: SAMEORIGIN');\n//...\n</code></pre>","tags":["PHP","Baja"]},{"location":"php/potential-clickjacking-on-legacy-browsers/","title":"Potential Clickjacking on Legacy Browsers","text":"<p>Agrega el fragmento de c\u00f3digo arriba del todo del archivo:</p> <p>Ya sea afuera de la etiqueta <code>&lt;?php</code> o dentro de una etiqueta <code>&lt;script&gt;</code> en donde inicie el contenido HTML.</p>  Original Solucionado <pre><code>&lt;?php\n</code></pre> <pre><code>&lt;style id = \"antiClickjack\"&gt; body {display:block !important;} &lt;/style&gt;\n&lt;script type=\"text/javascript\"&gt;\n    if(self === top)\n    {\n        var antiClickjack = document.getElementById(\"antiClickjack\");\n        antiClickjack.parentNode.removeChild(antiClickjack);\n    }\n    else\n    {\n        var _location = 'self.location';\n        window['top.location'] = window[_location];\n    }\n&lt;/script&gt;\n\n&lt;?php\n</code></pre>","tags":["PHP","Baja"]},{"location":"php/reflected-xss/","title":"Reflected XSS","text":"<p>Suele suceder con las variables superglobales, tales como <code>$_POST</code> y <code>$_GET</code>, al no ser sanitizadas correctamente.</p> <p>Envuelve el uso de estas variables con la funci\u00f3n <code>htmlspecialchars()</code> con los siguientes par\u00e1metros:</p> <ul> <li><code>ENT_QUOTES</code></li> <li><code>'UTF-8'</code></li> </ul>  Original Solucionado <pre><code>$_SESSION['token'] = $_POST['token'];\n</code></pre> <pre><code>$_SESSION['token'] = htmlspecialchars($_POST['token'], ENT_QUOTES, 'UTF-8');\n</code></pre>","tags":["PHP","Alta"]},{"location":"php/session-fixation/","title":"Session Fixation","text":"<p>Agrega <code>session_destroy()</code> en donde corresponda seg\u00fan lo reportado en la secci\u00f3n de Destination del reporte de Checkmarx y su correspondiente fragmento de c\u00f3digo.</p>  Original Solucionado <pre><code>function errorhandler($input) {\n    echo \"&lt;script language='javascript'&gt;window.location.href='$urlIntranet';&lt;/script&gt;\";\n    exit(0);\n}\n</code></pre> <pre><code>function errorhandler($input) {\n    echo \"&lt;script language='javascript'&gt;window.location.href='$urlIntranet';&lt;/script&gt;\";\n    session_destroy();\n    exit(0);\n}\n</code></pre>","tags":["PHP","Media"]},{"location":"php/ssrf/","title":"SSRF","text":"<p>Suele suceder con las variables superglobales, tales como <code>$_POST</code> y <code>$_GET</code>, al no ser sanitizadas correctamente.</p> <p>Envuelve el uso de estas variables con alguna de las siguientes funciones, y su correspondiente filtro de saneamiento (1):</p> <ol> <li> <p>Evita usar los siguientes filtros, pues result\u00e1n en vulnerabilidad Deprecated Functions</p> <ul> <li><code>FILTER_SANITIZE_STRING</code></li> <li><code>FILTER_SANITIZE_STRIPPED</code></li> </ul> </li> </ol> <ul> <li><code>filter_var()</code> (1)</li> <li><code>htmlspecialchars()</code> (2)</li> </ul> <ol> <li> <p>\u00dasalo principalmente para valores <code>int</code> y <code>float</code></p> <p>Consulta otros ejemplos aqu\u00ed</p> </li> <li> <p>\u00dasalo principalmente para valores <code>string</code></p> <p>Consulta otros ejemplos aqu\u00ed</p> </li> </ol>  Original Solucionado <pre><code>$numRegion = $_POST['numRegion'] ?? 0;\n\n$urlServlet = $_POST['urlServlet'] ?? '';\n</code></pre> <pre><code>$numRegion = filter_var($_POST['numRegion'] ?? 0, FILTER_SANITIZE_NUMBER_INT);\n\n$urlServlet = htmlspecialchars($_POST['urlServlet'] ?? '', ENT_QUOTES, 'UTF-8');\n</code></pre>","tags":["PHP","Media"]},{"location":"php/trust-boundary-violation-in-session-variables/","title":"Trust Boundary Violation in Session Variables","text":"<p>Suele suceder con las variables superglobales, tales como <code>$_POST</code> y <code>$_GET</code>, al no ser sanitizadas correctamente.</p> <p>Envuelve el uso de estas variables con alguna de las siguientes funciones, y su correspondiente filtro de saneamiento (1):</p> <ol> <li> <p>Evita usar los siguientes filtros, pues result\u00e1n en vulnerabilidad Deprecated Functions</p> <ul> <li><code>FILTER_SANITIZE_STRING</code></li> <li><code>FILTER_SANITIZE_STRIPPED</code></li> </ul> </li> </ol> <ul> <li><code>filter_input()</code></li> <li><code>filter_var()</code></li> </ul>","tags":["PHP","Baja"]},{"location":"php/trust-boundary-violation-in-session-variables/#filter_var","title":"<code>filter_var</code>","text":"Original Solucionado <pre><code>$_SESSION[$Session]['INDEX_ORIGEN'] = isset($_POST['urlorigen']) ? $_POST['urlorigen'] : '';\n</code></pre> <pre><code>/*(1)!*/$_SESSION[$Session]['INDEX_ORIGEN'] = filter_var($_POST['urlorigen'] ?? '', FILTER_SANITIZE_SPECIAL_CHARS);\n</code></pre> <ol> <li>Al inferir el tipo de variable (string) de <code>$_POST['urlorigen']</code>, se us\u00f3 el filtro de saneamiento <code>FILTER_SANITIZE_SPECIAL_CHARS</code>.</li> </ol>","tags":["PHP","Baja"]},{"location":"php/trust-boundary-violation-in-session-variables/#filter_input","title":"<code>filter_input</code>","text":"Consideraci\u00f3n <p>El contenido de la superglobal que se est\u00e1 filtrando, es el contenido original \u00aben bruto\u00bb, antes de cualquier modificaci\u00f3n por parte del usuario.</p> <p>Para filtrar una superglobal modificada, utiliza <code>filter_var()</code> en su lugar.</p>  Original Solucionado <pre><code>$nSeleccion = isset($_GET['nSeleccion']) ? $_GET['nSeleccion'] : 0;\n</code></pre> <pre><code>/*(1)!*/$nSeleccion = filter_input(INPUT_GET, 'nSeleccion', FILTER_SANITIZE_NUMBER_INT) ?: 0;\n</code></pre> <ol> <li>Al inferir el tipo de variable (int) de <code>$nSeleccion</code>, se us\u00f3 el filtro de saneamiento <code>FILTER_SANITIZE_NUMBER_INT</code>.</li> </ol>","tags":["PHP","Baja"]},{"location":"php/unchecked-input-for-loop-condition/","title":"Unchecked Input for Loop Condition","text":"<p>Cambia el ciclo <code>for</code> por <code>foreach</code></p>  Original Solucionado <pre><code>for ($i = 0; $i &lt; sizeof($response-&gt;perfil); $i++) {\n    if ($response-&gt;perfil[$i]-&gt;idu_area != $buffer) {\n        $buffer = $response-&gt;perfil[$i]-&gt;idu_area;\n        $_SESSION['SISTEMAS']['AREA'][$totalAreas] = new stdClass();\n        $_SESSION['SISTEMAS']['AREA'][$totalAreas]-&gt;idu_area = $response-&gt;perfil[$i]-&gt;idu_area;\n        $_SESSION['SISTEMAS']['AREA'][$totalAreas]-&gt;nom_nombrearea = $response-&gt;perfil[$i]-&gt;nom_nombrearea;\n        $_SESSION['SISTEMAS']['AREA'][$totalAreas]-&gt;ordenmenuarea = $response-&gt;perfil[$i]-&gt;ordenmenuarea;\n        $_SESSION['SISTEMAS']['AREA'][$totalAreas]-&gt;iconoarea = $response-&gt;perfil[$i]-&gt;iconoarea;\n        $_SESSION['SISTEMAS']['AREA'][$totalAreas]-&gt;desc_ayudaarea = $response-&gt;perfil[$i]-&gt;desc_ayudaarea;\n\n        $totalAreas++;\n    }\n}\n</code></pre> <pre><code>foreach ($response-&gt;perfil as $perfilItem) { // (1)!\n    if ($perfilItem-&gt;idu_area != $buffer) {\n        $buffer = $perfilItem-&gt;idu_area;\n        $_SESSION['SISTEMAS']['AREA'][$totalAreas] = new stdClass();\n        $_SESSION['SISTEMAS']['AREA'][$totalAreas]-&gt;idu_area = $perfilItem-&gt;idu_area;\n        $_SESSION['SISTEMAS']['AREA'][$totalAreas]-&gt;nom_nombrearea = $perfilItem-&gt;nom_nombrearea;\n        $_SESSION['SISTEMAS']['AREA'][$totalAreas]-&gt;ordenmenuarea = $perfilItem-&gt;ordenmenuarea;\n        $_SESSION['SISTEMAS']['AREA'][$totalAreas]-&gt;iconoarea = $perfilItem-&gt;iconoarea;\n        $_SESSION['SISTEMAS']['AREA'][$totalAreas]-&gt;desc_ayudaarea = $perfilItem-&gt;desc_ayudaarea;\n\n        $totalAreas++;\n    }\n}\n</code></pre> <ol> <li>Asegurate de reemplazar todas las ocurrencias de <code>$iterable[$i]</code> por <code>$item</code>.  En este caso <code>$response-&gt;perfil[$i]</code>por <code>$perfilItem</code></li> </ol>","tags":["PHP","Media"]}]}